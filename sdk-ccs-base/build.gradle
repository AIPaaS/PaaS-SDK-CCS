dependencies {
	compile "commons-io:commons-io:2.6"
	// https://mvnrepository.com/artifact/org.apache.zookeeper/zookeeper
	compile group: 'org.apache.zookeeper', name: 'zookeeper', version: '3.4.14'
    compile ('org.apache.curator:curator-framework:4.2.0'){
    	exclude group: "org.apache.zookeeper", module: "zookeeper"
        exclude group: "org.slf4j", module: "slf4j-api"
        exclude group: "log4j", module: "log4j"
    }
    compile ('org.apache.curator:curator-recipes:4.2.0'){
    		exclude group: "org.apache.zookeeper", module: "zookeeper"
            exclude group: "org.slf4j", module: "slf4j-api"
            exclude group: "log4j", module: "log4j"
    }
}

publishing {
    publications {
        mavenJar(MavenPublication) {
	       	groupId group
	        artifactId "${moduleName}"
        	version moduleVersion
        	artifact jar

			artifact (sourcesJar) { classifier "sources" }
            pom.withXml {
				//Creating additional node for dependencies
				def dependenciesNode = asNode().appendNode('dependencies')

				//Defining configuration names from which dependencies will be taken (debugCompile or releaseCompile and compile)
				def configurationNames = ['compile']

				configurationNames.each { configurationName ->
					configurations[configurationName].allDependencies.each {
						if (it.group != null && it.name != null) {
							def dependencyNode = dependenciesNode.appendNode('dependency')
							dependencyNode.appendNode('groupId', it.group)
							dependencyNode.appendNode('artifactId', it.name)
							dependencyNode.appendNode('version', it.version)

							//If there are any exclusions in dependency
							if (it.excludeRules.size() > 0) {
								def exclusionsNode = dependencyNode.appendNode('exclusions')
								it.excludeRules.each { rule ->
									def exclusionNode = exclusionsNode.appendNode('exclusion')
									exclusionNode.appendNode('groupId', rule.group)
									exclusionNode.appendNode('artifactId', rule.module)
								}
							}
						}
					}
				}
			}
        }
    }
    repositories {
        maven {
            if(moduleVersion.endsWith('-SNAPSHOT')) {
                url publishSnapShotsURL
            } else {
                url publishReleaseURL
            }
            credentials {
                username = repoUser
				password = repoPassword
            }
        }
    }
}